1.
#include<stdio.h>
#include<stdlib.h>
struct node
{
    struct node *left,*right;
    int data;
};

struct node *root=NULL;

struct QueueNode
{
    struct node* current;
    struct QueueNode* next;
};

struct QueueNode *rear=NULL;
struct QueueNode *front=NULL;






void insert(struct node *currentNode){
    struct QueueNode *newNode=(struct QueueNode *)malloc(sizeof(struct QueueNode));
    if(rear==NULL && front==NULL){
        newNode->current=currentNode;
        rear=newNode;
        front=newNode;
        newNode->next=NULL;
        
    }
    else{
        newNode->current=currentNode;
        rear->next=newNode;
        rear=newNode;
        
    }

}

struct node *delete ()
{
    struct node *popNode;
    if (front == NULL)
    {
        // printf("\nhere  1");
        popNode = NULL;
    }
    else if (front == rear)
    {
      
        popNode = front->current;
        //   printf("\nhere %d",popNode->data);
        front = rear = NULL;
    }
    else
    {
        // printf("\nhere  3");
        popNode = front->current;
        front = front->next;
    }
    return popNode;
}



struct node* createTree(){
    struct node *newnode=(struct node*)malloc(sizeof(struct node));
    int x;
    printf("\nEnter data:-> [-1 for no node]");
    scanf("%d",&x);
    if (x==-1) return 0;
    newnode->data=x;
    printf("\nenter left child:->");
    newnode->left=createTree();
        printf("\nenter right child:->");
    newnode->right=createTree();
    return newnode;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

2.

#include<stdio.h>
#include<stdlib.h>
struct node
{
    struct node *left,*right;
    int data;
};

struct node *root=NULL;

struct QueueNode
{
    struct node* current;
    struct QueueNode* next;
};

struct QueueNode *rear=NULL;
struct QueueNode *front=NULL;


struct node* create(int value){
    struct node *newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=value;
    newnode->left=NULL;
    newnode->right=NULL; 
    return newnode;
}

struct node* insertAtLeft(struct node *root,int val){
    root->left=create(val);
    return root->left;
}

struct node* insertAtRight(struct node *root,int val){
    root->right=create(val);
    return root->right;
}



void insert(struct node *currentNode){
    struct QueueNode *newNode=(struct QueueNode *)malloc(sizeof(struct QueueNode));
    if(rear==NULL && front==NULL){
        newNode->current=currentNode;
        rear=newNode;
        front=newNode;
        newNode->next=NULL;
        
    }
    else{
        newNode->current=currentNode;
        rear->next=newNode;
        rear=newNode;
        
    }

}

struct node *delete ()
{
    struct node *popNode;
    if (front == NULL)
    {
        
        popNode = NULL;
    }
    else if (front == rear)
    {
      
        popNode = front->current;
       
        front = rear = NULL;
    }
    else
    {
        popNode = front->current;
        front = front->next;
    }
    return popNode;
}


void levelOrderTraversal() {
    struct node *temp = root;
    struct node *popNode;
    insert(temp);

    while (front != NULL) {
        popNode = delete();
        printf("\t%d", popNode->data);

        if (popNode->left != NULL) {
            insert(popNode->left);
        }
        if (popNode->right != NULL) {
            insert(popNode->right);
        }
    }
}

int main(){
    root=create(10);
    levelOrderTraversal();

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


3.

#include<stdio.h>
#include<stdlib.h>
struct node
{
    struct node *left,*right;
    int data;
};

struct node *root=NULL;
int idx=0;


void InorderTraversalRecursive(struct node *root){
    if(root==NULL) return;
    InorderTraversalRecursive(root->left);
    printf("\t%d",root->data);
    InorderTraversalRecursive(root->right);
}

struct node* createTree(int *arr){
    struct node *newnode=(struct node*)malloc(sizeof(struct node));
    int x,choice;
    if(idx>2) return NULL;
    printf("\n%d is the next element->",arr[idx]);
    printf("\nEnter data:-> [-1 for no node]");
    scanf("%d",&choice);
    if (choice==-1 || idx>2) {
        return NULL;
        }
    x=arr[idx++];
    newnode->data=x;
    printf("\nenter left child:->");
    newnode->left=createTree(arr);
    printf("\nenter right child:->");
    newnode->right=createTree(arr);
    return newnode;
}



int main(){
    int arr[]={10,20,30};
    root=createTree(arr);
    InorderTraversalRecursive(root);
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/
4 and 5 together


#include<stdio.h>
#include<stdlib.h>
struct node
{
    struct node *left,*right;
    int data;
};

struct StackNode{
    struct node *current;
    struct StackNode* next;
};

struct node *root=NULL;
struct StackNode *top=NULL;
int c1=0,c2=0,sub=0;
int degree=0;


struct StackNode* push(struct node *item){
    struct StackNode *newnode=(struct StackNode*)malloc(sizeof(struct StackNode));
     newnode->current=item;
    if(top==NULL){
        newnode->next=NULL;
    }
    else{
        newnode->next=top;
    }
    top=newnode;
}

struct node *pop(){
    if(top==NULL){
        return NULL;
    }
        struct node *popNode=top->current;
        top=top->next;

    return popNode;
}

struct node *peek(){
    return top->current;
}

void InorderTraversalRecursive(struct node *root){
    if(root==NULL) return;
    InorderTraversalRecursive(root->left);
    printf("\t%d",root->data);
    InorderTraversalRecursive(root->right);
}

struct node* createTree(){
    struct node *newnode=(struct node*)malloc(sizeof(struct node));
    int x;
    printf("\nEnter data:-> [-1 for no node]");
    scanf("%d",&x);
    if (x==-1) return 0;
    newnode->data=x;
    printf("\nenter left child:->");
    newnode->left=createTree();
        printf("\nenter right child:->");
    newnode->right=createTree();
    return newnode;
}

void getHeight(struct node *root){
    struct node *temp=root;
    while (temp != NULL || top!= NULL){

        while (temp != NULL){
            push(temp);
            temp=temp->left;
            c1++;
        }
        if(c1>c2) c2=c1;

        struct node *temp2=pop();
        temp=temp2->right;
        if(temp2==root){
            c1=1;
            sub=0;
        }
        
        if(temp==NULL){
            sub++;
        }
        else if (temp!=NULL && temp2->left!=NULL)
        {
            c1=c1-sub;
        }
        
    }

}

void getDegree(struct node *curNode){
    if (curNode->left!=NULL)
    {
        degree++;
    }
     if (curNode->right!=NULL)
    {
        degree++;
    } 
}

int main(){
    root=createTree();
    getHeight(root);
    printf("%d->height of the binary tree is->",c2-1);
    getDegree(root);
     printf("%d->degree of the given node is->",c2-1);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 6 and 7..

#include<stdio.h>
#include<stdlib.h>
struct node
{
    struct node *left,*right;
    int data;
};

struct StackNode{
    struct node *current;
    struct StackNode* next;
};

struct node *root=NULL;
struct StackNode *top=NULL;

struct StackNode* push(struct node *item){
    struct StackNode *newnode=(struct StackNode*)malloc(sizeof(struct StackNode));
     newnode->current=item;
    if(top==NULL){
        newnode->next=NULL;
    }
    else{
        newnode->next=top;
    }
    top=newnode;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



8.

#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};


struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}


int countNodes(struct Node* root) {
    if (root == NULL) {
        return 0;
    } else {
        return 1 + countNodes(root->left) + countNodes(root->right);
    }
}


int main() {
    
    struct Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->left = createNode(6);
    root->right->right = createNode(7);

   
    int nodeCount = countNodes(root);

    printf("Number of nodes in the binary tree: %d\n", nodeCount);

    return 0;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

9.


#include <stdio.h>
#include<stdlib.h>
struct node
{
    struct node *left,*right;
    int data;
};

struct StackNode{
    struct node *current;
    struct StackNode* next;
};

struct node *root=NULL;
struct StackNode *top=NULL;
int binaryTree[50];
int idx1=0,idx2=0;

struct StackNode* push(struct node *item){
    struct StackNode *newnode=(struct StackNode*)malloc(sizeof(struct StackNode));
     newnode->current=item;
    if(top==NULL){
        newnode->next=NULL;
    }
    else{
        newnode->next=top;
    }
    top=newnode;
}

struct node *pop(){
    if(top==NULL){
        return NULL;
    }
        struct node *popNode=top->current;
        top=top->next;

    return popNode;
}

struct node *peek(){
    return top->current;
}


int countNodes(int tree[], int index, int size) {
    if (index < size && tree[index] != -1) {
        
        return 1 + countNodes(tree, 2 * index + 1, size) + countNodes(tree, 2 * index + 2, size);
    } else {
        
        return 0;
    }
}

bool isPresent(int val){
    for (int i = 0; i < 50; i++)
    {
        if(binaryTree[i]==val) return true;
    }
    return false;
    
}

int getIndex(int val){
 for (int i = 0; i < 50; i++)
    {
        if(binaryTree[i]==val) return i;
    }
    return -1;
}

void binaryTreeToArray(struct node *root){
    struct node *temp=root;
      while (temp!=NULL || top!=NULL)
    {
       while (temp!=NULL)
       {
        push(temp);
        
        if(isPresent(temp->data)){
            idx1=getIndex(temp->data);
            idx2=idx1;
        }
        else{
            binaryTree[idx1]=temp->data;
        }
            idx1=(2*idx1)+1;
            if (temp->left!=NULL)
            {
            binaryTree[idx1]=temp->left->data;
            }
            else{
                binaryTree[idx1]=-1;
            }
            idx1=idx2;
            idx1=(2*idx1)+2;
            if (temp->right!=NULL)
            {
            binaryTree[idx1]=temp->right->data;
            }
            else{
                binaryTree[idx1]=-1;
            }
            temp=temp->left;
       }
       struct node *temp2=pop();
       temp=temp2->right;
    }
}

struct node* createTree(){
    struct node *newnode=(struct node*)malloc(sizeof(struct node));
    int x;
    printf("\nEnter data:-> [-1 for no node]");
    scanf("%d",&x);
    if (x==-1) return 0;
    newnode->data=x;
    printf("\nenter left child:->");
    newnode->left=createTree();
        printf("\nenter right child:->");
    newnode->right=createTree();
    return newnode;
}

int main() {
   
    
    root=createTree();
    binaryTreeToArray(root);
    
    int numberOfNodes = countNodes(binaryTree, 0, sizeof(binaryTree) / sizeof(binaryTree[0]));
    printf("Number of nodes in the binary tree: %d\n", numberOfNodes);

    return 0;
}


struct node *pop(){
    if(top==NULL){
        return NULL;
    }
        struct node *popNode=top->current;
        top=top->next;

    return popNode;
}

struct node *peek(){
    return top->current;
}

struct node* createTree(){
    struct node *newnode=(struct node*)malloc(sizeof(struct node));
    int x;
    printf("\nEnter data:-> [-1 for no node]");
    scanf("%d",&x);
    if (x==-1) return 0;
    newnode->data=x;
    printf("\nenter left child:->");
    newnode->left=createTree();
        printf("\nenter right child:->");
    newnode->right=createTree();
    return newnode;
}

int getTotalLeafNodes(struct node *root){
    struct node *temp=root;
    int leafNodes=0;
    while (temp!=NULL || top!=NULL)
    {
       while (temp!=NULL)
       {
        push(temp);
        temp=temp->left;
       }
       struct node *temp2=pop();
       temp=temp2->right;
       if (temp2->left==NULL && temp2->right==NULL)
       {
        leafNodes++;
       }
    }
    return leafNodes;
}

int getTotalInternalNodes(struct node *root){
    struct node *temp=root;
    int internalNodes=0;
    while (temp!=NULL || top!=NULL)
    {
       while (temp!=NULL)
       {
        push(temp);
        temp=temp->left;
       }
       struct node *temp2=pop();
       temp=temp2->right;
       if (temp2->left!=NULL && temp2->right!=NULL)
       {
        internalNodes++;
       }
       else if (temp2->left!=NULL || temp2->right!=NULL)
       {
        internalNodes++;
       }
    }
    return internalNodes;
}

int main(){
    root=createTree();
    printf("%d",getTotalInternalNodes(root));
}


//////////////////////////////





void levelOrderTraversal() {
    struct node *temp = root;
    struct node *popNode;
    insert(temp);

    while (front != NULL) {
        popNode = delete();
        printf("\t%d", popNode->data);

        if (popNode->left != NULL) {
            insert(popNode->left);
        }
        if (popNode->right != NULL) {
            insert(popNode->right);
        }
    }
}

int main(){
    root=createTree();
    levelOrderTraversal();

}